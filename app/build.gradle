apply plugin: 'com.android.application'
apply plugin: 'customplugin'
/** 应用下面插件导致应用编译后直接安装不起，暂屏蔽*/
apply plugin: 'testplugin'

//    apply from: 'delegate.gradle'
apply from: 'incremental.gradle'
apply from: 'customproperty.gradle'
apply from: 'dependency.gradle'
apply from: 'customtask.gradle'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
//apply from: 'customplugin.gradle'

apply plugin: 'kotlin-noarg'
apply plugin: 'kotlin-allopen'
apply plugin: 'kotlin-android-extensions'
//apply plugin: 'com.android.databinding'


android {
//    signingConfigs {
//        config {
//            storeFile file('C:/Users/Administrator/.android/debug.keystore')
//        }
//    }
    compileSdkVersion 28
    defaultConfig {
        applicationId "com.administrator.learndemo"
        minSdkVersion 19
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"

        multiDexEnabled true
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    dataBinding {
        enabled = true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'com.android.support:multidex:1.0.1'
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.core:core-ktx:1.3.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
    implementation 'androidx.recyclerview:recyclerview:1.2.0-alpha01'

    implementation 'com.google.android.material:material:1.1.0'

    implementation 'com.squareup.okhttp3:okhttp:3.10.0'
    implementation 'com.google.code.gson:gson:2.8.2'
    androidTestImplementation 'junit:junit:4.12'

    //运行时权限
    implementation 'com.tbruyelle.rxpermissions2:rxpermissions:0.9.4@aar'
    implementation 'io.reactivex.rxjava2:rxjava:2.0.2'
    implementation 'com.jakewharton.rxbinding2:rxbinding:2.0.0'

    implementation ('io.reactivex.rxjava2:rxandroid:2.0.2') {
        exclude group: 'com.android.support'
    }
    implementation 'com.jakewharton.rxrelay2:rxrelay:2.0.0'

    implementation 'com.squareup.retrofit2:retrofit:2.4.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.4.0'
    implementation 'com.squareup.retrofit2:adapter-rxjava2:2.4.0'

    implementation 'com.github.bumptech.glide:glide:4.11.0'
    annotationProcessor 'com.github.bumptech.glide:compiler:4.11.0'

    api 'com.jakewharton:butterknife:10.2.3'
    annotationProcessor 'com.jakewharton:butterknife-compiler:10.2.3'

    api'com.google.dagger:dagger:2.28'
    annotationProcessor 'com.google.dagger:dagger-compiler:2.28'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
}

task helloWorld {
    println "Hello World!"
}

task task2(dependsOn: helloWorld) {
    doLast {
        println "I am task 3"
    }
}

task showTasks {
    println tasks.class
    println tasks.size()
}

tasks.create(name: 'task4') {
    println 'task4'
}

task task3(dependsOn: helloWorld) {
    doFirst {
        println "I am task 2"
    }
}

task task5 {
    description = "this is task5"
    println description
}

task task6 {
    doFirst {
        println "task6 des:" + description
    }
}

task6 {
    description = "1.0.2"
}

task6.configure {
    description = "1.0.3"
}

/***************************************************************************************
 * 以下3个Task完成的功能均相同，即先设置Task的description属性，在将其输出到命令行。
 * 但是，他们对description的设置方式是不同的。对于showDescription1，我们在定义一个
 * Task的同时便设置description；对于showDescription2，其本身便是Project的一个Property；
 * 而对于showDescription3，我们是在一个和它同名的方法中设置description。
 **************************************************************************************/
task showDescription1 {
    doFirst {
        description = 'this is task showDescription'
        println description
    }
}

task showDescription2 {
    doFirst {
        println description
    }
}

showDescription2.description = 'this is task showDescription'

task showDescription3 {
    doFirst {
        println description
    }
}

showDescription3 {
    description = 'this is task showDescription'
}
/***************************************************************************************
 * 事实上，对于每一个Task，Gradle都会在Project中创建一个同名的Property，所以我们可以将该Task当作Property来访问，
 * showDescription2便是这种情况。另外，Gradle还会创建一个同名的方法，该方法接受一个闭包，我们可以使用该方法来
 * 配置Task，showDescription3便是这种情况。
 * *************************************************************************************/

/***************************************************************************************
 * 要读懂Gradle，我们首先需要了解Groovy语言中的两个概念，一个Groovy中的Bean概念，一个是Groovy闭包的delegate机制。
 * Groovy中的Bean和Java中的Bean有一个很大的不同，即Groovy为每一个字段都会自动生成getter和setter，并且我们可以通过像访问字段本身一样调用getter和setter，比如：
 * *************************************************************************************/
class GroovyBeanExample {
    private String name
}

def bean = new GroovyBeanExample()
bean.name = 'this is name'
println bean.name
